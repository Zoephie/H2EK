; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_light_response_default_light_combined_tex_one_change_color_3.txt
;
#const C1.rgb= $change_color_primary
#const C3.rgb= $light_diffuse_color
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=0 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp22;
    float3 temp23;
    temp23= saturate(tex0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    tex0.rgb= temp22;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(color0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=0 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp28;
    float3 temp29;
    temp29= saturate(tex0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= c3.rgb;
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    tex0.rgb= temp28;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp34;
    float temp35;
    temp35= saturate(color1.b);
    float3 temp36;
    temp34= temp35;
    r0.a= temp34;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 0;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(r0.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(tex0.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= lerp(temp38,temp39,round(r0.a));
    r0.rgb= temp37;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp47;
    temp47= saturate(r0.rgb);
    float3 temp48;
    e= temp47;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp49;
    temp49= saturate(tex3.rgb);
    float3 temp50;
    f= temp49;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= e.rgb*f.rgb;
    temp52= temp53;
    float temp54;
    temp54= 1-saturate(color0.b);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp57;
    float temp58;
    temp58= 0;
    float3 temp59;
    temp57= temp58;
    r0.rgb= temp51;
    r0.a= temp57;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=1 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp37;
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= saturate(r0.rgb);
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=1 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp43;
    float3 temp44;
    float3 temp45;
    float3 temp46;
    temp46= saturate(r0.rgb);
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=2 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    temp39= temp42;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp44;
    float temp45;
    float3 temp46;
    float temp47;
    temp47= 0;
    float3 temp48;
    temp45= temp47;
    float3 temp49;
    temp49= saturate(r0.rgb);
    float3 temp50;
    float3 temp51;
    temp51= saturate(tex0.rgb);
    float3 temp52;
    float3 temp53;
    temp53= temp49 * temp51;
    temp46= temp53;
    temp44= lerp(temp45,temp46,round(r0.a));
    r0.rgb= temp44;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp54;
    temp54= saturate(r0.rgb);
    float3 temp55;
    e= temp54;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp56;
    temp56= saturate(tex3.rgb);
    float3 temp57;
    f= temp56;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= e.rgb*f.rgb;
    temp59= temp60;
    float temp61;
    temp61= 1-saturate(color0.b);
    float3 temp62;
    float3 temp63;
    temp63= temp59 * temp61;
    temp58= temp63;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp64;
    float temp65;
    temp65= 0;
    float3 temp66;
    temp64= temp65;
    r0.rgb= temp58;
    r0.a= temp64;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=2 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    temp45= temp48;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp50;
    float temp51;
    float3 temp52;
    float temp53;
    temp53= 0;
    float3 temp54;
    temp51= temp53;
    float3 temp55;
    temp55= saturate(r0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= saturate(tex0.rgb);
    float3 temp58;
    float3 temp59;
    temp59= temp55 * temp57;
    temp52= temp59;
    temp50= lerp(temp51,temp52,round(r0.a));
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    e= temp60;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp62;
    temp62= saturate(tex3.rgb);
    float3 temp63;
    f= temp62;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp64;
    float3 temp65;
    float3 temp66;
    temp66= e.rgb*f.rgb;
    temp65= temp66;
    float temp67;
    temp67= 1-saturate(color0.b);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp64= temp69;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp70;
    float temp71;
    temp71= 0;
    float3 temp72;
    temp70= temp71;
    r0.rgb= temp64;
    r0.a= temp70;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=3 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=3 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 85: R0= 0 mux R0*T0
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=0 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp22;
    float3 temp23;
    temp23= saturate(tex0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    tex0.rgb= temp22;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    temp31= 2 * temp31;
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(color0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=0 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp28;
    float3 temp29;
    temp29= saturate(tex0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= c3.rgb;
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    tex0.rgb= temp28;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp34;
    float temp35;
    temp35= saturate(color1.b);
    float3 temp36;
    temp34= temp35;
    r0.a= temp34;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 0;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(r0.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(tex0.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= lerp(temp38,temp39,round(r0.a));
    temp37= 2 * temp37;
    r0.rgb= temp37;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp47;
    temp47= saturate(r0.rgb);
    float3 temp48;
    e= temp47;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp49;
    temp49= saturate(tex3.rgb);
    float3 temp50;
    f= temp49;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= e.rgb*f.rgb;
    temp52= temp53;
    float temp54;
    temp54= 1-saturate(color0.b);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp57;
    float temp58;
    temp58= 0;
    float3 temp59;
    temp57= temp58;
    r0.rgb= temp51;
    r0.a= temp57;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=1 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp37;
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= saturate(r0.rgb);
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    temp47= 2 * temp47;
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=1 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp43;
    float3 temp44;
    float3 temp45;
    float3 temp46;
    temp46= saturate(r0.rgb);
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    temp53= 2 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=2 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    temp39= temp42;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp44;
    float temp45;
    float3 temp46;
    float temp47;
    temp47= 0;
    float3 temp48;
    temp45= temp47;
    float3 temp49;
    temp49= saturate(r0.rgb);
    float3 temp50;
    float3 temp51;
    temp51= saturate(tex0.rgb);
    float3 temp52;
    float3 temp53;
    temp53= temp49 * temp51;
    temp46= temp53;
    temp44= lerp(temp45,temp46,round(r0.a));
    temp44= 2 * temp44;
    r0.rgb= temp44;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp54;
    temp54= saturate(r0.rgb);
    float3 temp55;
    e= temp54;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp56;
    temp56= saturate(tex3.rgb);
    float3 temp57;
    f= temp56;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= e.rgb*f.rgb;
    temp59= temp60;
    float temp61;
    temp61= 1-saturate(color0.b);
    float3 temp62;
    float3 temp63;
    temp63= temp59 * temp61;
    temp58= temp63;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp64;
    float temp65;
    temp65= 0;
    float3 temp66;
    temp64= temp65;
    r0.rgb= temp58;
    r0.a= temp64;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=2 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    temp45= temp48;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp50;
    float temp51;
    float3 temp52;
    float temp53;
    temp53= 0;
    float3 temp54;
    temp51= temp53;
    float3 temp55;
    temp55= saturate(r0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= saturate(tex0.rgb);
    float3 temp58;
    float3 temp59;
    temp59= temp55 * temp57;
    temp52= temp59;
    temp50= lerp(temp51,temp52,round(r0.a));
    temp50= 2 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    e= temp60;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp62;
    temp62= saturate(tex3.rgb);
    float3 temp63;
    f= temp62;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp64;
    float3 temp65;
    float3 temp66;
    temp66= e.rgb*f.rgb;
    temp65= temp66;
    float temp67;
    temp67= 1-saturate(color0.b);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp64= temp69;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp70;
    float temp71;
    temp71= 0;
    float3 temp72;
    temp70= temp71;
    r0.rgb= temp64;
    r0.a= temp70;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=3 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    temp47= 2 * temp47;
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=3 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 88: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    temp53= 2 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=0 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp22;
    float3 temp23;
    temp23= saturate(tex0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    tex0.rgb= temp22;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    temp31= 4 * temp31;
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(color0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=0 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=3 term=3
    // line 50: T0= T0*C0
    float3 temp28;
    float3 temp29;
    temp29= saturate(tex0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= c3.rgb;
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    tex0.rgb= temp28;
    // exp.components=1 term=1
    // line 52: R0a= D1b
    float temp34;
    float temp35;
    temp35= saturate(color1.b);
    float3 temp36;
    temp34= temp35;
    r0.a= temp34;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 0;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(r0.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(tex0.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= lerp(temp38,temp39,round(r0.a));
    temp37= 4 * temp37;
    r0.rgb= temp37;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp47;
    temp47= saturate(r0.rgb);
    float3 temp48;
    e= temp47;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp49;
    temp49= saturate(tex3.rgb);
    float3 temp50;
    f= temp49;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= e.rgb*f.rgb;
    temp52= temp53;
    float temp54;
    temp54= 1-saturate(color0.b);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp57;
    float temp58;
    temp58= 0;
    float3 temp59;
    temp57= temp58;
    r0.rgb= temp51;
    r0.a= temp57;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=1 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp37;
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= saturate(r0.rgb);
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    temp47= 4 * temp47;
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=1 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 55: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 58: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 59: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=3 term=3
    // line 61: R0= R0 - D1*D1
    float3 temp43;
    float3 temp44;
    float3 temp45;
    float3 temp46;
    temp46= saturate(r0.rgb);
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    temp53= 4 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=2 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    temp39= temp42;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp44;
    float temp45;
    float3 temp46;
    float temp47;
    temp47= 0;
    float3 temp48;
    temp45= temp47;
    float3 temp49;
    temp49= saturate(r0.rgb);
    float3 temp50;
    float3 temp51;
    temp51= saturate(tex0.rgb);
    float3 temp52;
    float3 temp53;
    temp53= temp49 * temp51;
    temp46= temp53;
    temp44= lerp(temp45,temp46,round(r0.a));
    temp44= 4 * temp44;
    r0.rgb= temp44;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp54;
    temp54= saturate(r0.rgb);
    float3 temp55;
    e= temp54;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp56;
    temp56= saturate(tex3.rgb);
    float3 temp57;
    f= temp56;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= e.rgb*f.rgb;
    temp59= temp60;
    float temp61;
    temp61= 1-saturate(color0.b);
    float3 temp62;
    float3 temp63;
    temp63= temp59 * temp61;
    temp58= temp63;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp64;
    float temp65;
    temp65= 0;
    float3 temp66;
    temp64= temp65;
    r0.rgb= temp58;
    r0.a= temp64;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=2 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 64: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 67: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 68: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 70: R0= 1 - D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    temp45= temp48;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp50;
    float temp51;
    float3 temp52;
    float temp53;
    temp53= 0;
    float3 temp54;
    temp51= temp53;
    float3 temp55;
    temp55= saturate(r0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= saturate(tex0.rgb);
    float3 temp58;
    float3 temp59;
    temp59= temp55 * temp57;
    temp52= temp59;
    temp50= lerp(temp51,temp52,round(r0.a));
    temp50= 4 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    e= temp60;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp62;
    temp62= saturate(tex3.rgb);
    float3 temp63;
    f= temp62;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp64;
    float3 temp65;
    float3 temp66;
    temp66= e.rgb*f.rgb;
    temp65= temp66;
    float temp67;
    temp67= 1-saturate(color0.b);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp64= temp69;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp70;
    float temp71;
    temp71= 0;
    float3 temp72;
    temp70= temp71;
    r0.rgb= temp64;
    r0.a= temp70;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_contrast=3 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 38: R0= EXPAND(T2).EXPAND(T1)
    float temp16;
    float3 temp17;
    temp17= 2 * saturate(tex2.rgb) - 1;
    float3 temp18;
    float3 temp19;
    temp19= 2 * saturate(tex1.rgb) - 1;
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    r0.rgb= temp16;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp22;
    float temp23;
    temp23= saturate(color1.b);
    float3 temp24;
    temp22= temp23;
    r0.a= temp22;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp25;
    float3 temp26;
    temp26= saturate(tex0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= c3.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp31;
    float3 temp32;
    temp32= 1-saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= 1-saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    tex0.rgb= temp25;
    color1.rgb= temp31;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp37;
    float temp38;
    float3 temp39;
    float temp40;
    temp40= 1;
    float3 temp41;
    temp38= temp40;
    float3 temp42;
    temp42= saturate(color1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= saturate(color1.rgb);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp39= temp46;
    temp37= temp38 - temp39;
    r0.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp47;
    float temp48;
    float3 temp49;
    float temp50;
    temp50= 0;
    float3 temp51;
    temp48= temp50;
    float3 temp52;
    temp52= saturate(r0.rgb);
    float3 temp53;
    float3 temp54;
    temp54= saturate(tex0.rgb);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp49= temp56;
    temp47= lerp(temp48,temp49,round(r0.a));
    temp47= 4 * temp47;
    r0.rgb= temp47;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp57;
    temp57= saturate(r0.rgb);
    float3 temp58;
    e= temp57;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp59;
    temp59= saturate(tex3.rgb);
    float3 temp60;
    f= temp59;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp61;
    float3 temp62;
    float3 temp63;
    temp63= e.rgb*f.rgb;
    temp62= temp63;
    float temp64;
    temp64= 1-saturate(color0.b);
    float3 temp65;
    float3 temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp67;
    float temp68;
    temp68= 0;
    float3 temp69;
    temp67= temp68;
    r0.rgb= temp61;
    r0.a= temp67;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_contrast=3 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
sampler2D s4 : register(S4);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
    // exp.components=3 term=3 term=3
    // line 27: T4= INVERT(T4) + T4*C0
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= 1-saturate(tex4.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex4.rgb);
    float3 temp6;
    float3 temp7;
    temp7= c1.rgb;
    float3 temp8;
    float3 temp9;
    temp9= temp5 * temp7;
    temp2= temp9;
    temp0= temp1 + temp2;
    // exp.components=3 term=3
    // line 28: T0= T4*T0
    float3 temp10;
    float3 temp11;
    temp11= saturate(tex4.rgb);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp10= temp15;
    tex4.rgb= temp0;
    tex0.rgb= temp10;
    // exp.components=1 term=1
    // line 42: T3= T3.C0
    float temp16;
    float3 temp17;
    temp17= saturate(tex3.rgb);
    float3 temp18;
    float3 temp19;
    temp19= float3(0.000000,0.000000,1.000000);
    float3 temp20;
    float temp21;
    temp21= dot(temp17, temp19);
    temp16= temp21;
    // exp.components=1 term=1
    // line 43: R0= EXPAND(T2).EXPAND(T1)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 2 * saturate(tex1.rgb) - 1;
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    tex3.rgb= temp16;
    r0.rgb= temp22;
    // exp.components=1 term=1
    // line 73: R0a= D1b
    float temp28;
    float temp29;
    temp29= saturate(color1.b);
    float3 temp30;
    temp28= temp29;
    r0.a= temp28;
    // exp.components=3 term=3
    // line 76: T0= T0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c3.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 77: D1= INVERT(R0)*INVERT(R0)
    float3 temp37;
    float3 temp38;
    temp38= 1-saturate(r0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= 1-saturate(r0.rgb);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    tex0.rgb= temp31;
    color1.rgb= temp37;
    // exp.components=3 term=1 term=3
    // line 79: R0= 1 - D1*D1
    float3 temp43;
    float temp44;
    float3 temp45;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= saturate(color1.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(color1.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp45= temp52;
    temp43= temp44 - temp45;
    r0.rgb= temp43;
    // exp.components=3 term=1 term=3
    // line 91: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp53;
    float temp54;
    float3 temp55;
    float temp56;
    temp56= 0;
    float3 temp57;
    temp54= temp56;
    float3 temp58;
    temp58= saturate(r0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= saturate(tex0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp55= temp62;
    temp53= lerp(temp54,temp55,round(r0.a));
    temp53= 4 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 95: E= R0
    float3 temp63;
    temp63= saturate(r0.rgb);
    float3 temp64;
    e= temp63;
    // exp.components=3 term=3
    // line 96: F= T3
    float3 temp65;
    temp65= saturate(tex3.rgb);
    float3 temp66;
    f= temp65;
    // exp.components=3 term=3
    // line 97: SRCCOLOR= EF*INVERT(D0b)
    float3 temp67;
    float3 temp68;
    float3 temp69;
    temp69= e.rgb*f.rgb;
    temp68= temp69;
    float temp70;
    temp70= 1-saturate(color0.b);
    float3 temp71;
    float3 temp72;
    temp72= temp68 * temp70;
    temp67= temp72;
    // exp.components=1 term=1
    // line 98: SRCALPHA= 0
    float temp73;
    float temp74;
    temp74= 0;
    float3 temp75;
    temp73= temp74;
    r0.rgb= temp67;
    r0.a= temp73;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
