; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_light_response_default_light_combined_tangentspace_2.txt
;
#const C1.rgb= $light_diffuse_color
#case $light_diffuse_contrast=0 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3
    // line 65: R0= R0*T0
    float3 temp12;
    float3 temp13;
    temp13= saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= saturate(tex0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    r0.rgb= temp12;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp18;
    temp18= saturate(r0.rgb);
    float3 temp19;
    e= temp18;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp20;
    temp20= 1;
    float3 temp21;
    f= temp20;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp22;
    float3 temp23;
    float3 temp24;
    temp24= e.rgb*f.rgb;
    temp23= temp24;
    float temp25;
    temp25= 1-saturate(tex0.b);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp28;
    float temp29;
    temp29= 0;
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp22;
    r0.a= temp28;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=1 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 42: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 43: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 45: R0= R0 - D0*D0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 65: R0= R0*T0
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=2 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 49: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 50: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 52: R0= 1 - D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    temp20= temp23;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 65: R0= R0*T0
    float3 temp25;
    float3 temp26;
    temp26= saturate(r0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= saturate(tex0.rgb);
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp31;
    temp31= saturate(r0.rgb);
    float3 temp32;
    e= temp31;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp33;
    temp33= 1;
    float3 temp34;
    f= temp33;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp35;
    float3 temp36;
    float3 temp37;
    temp37= e.rgb*f.rgb;
    temp36= temp37;
    float temp38;
    temp38= 1-saturate(tex0.b);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r0.rgb= temp35;
    r0.a= temp41;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=3 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 56: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 57: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 59: R0= 1 - D0*D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 65: R0= R0*T0
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=0 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3
    // line 68: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp12;
    float3 temp13;
    temp13= saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= saturate(tex0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    temp12= 2 * temp12;
    r0.rgb= temp12;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp18;
    temp18= saturate(r0.rgb);
    float3 temp19;
    e= temp18;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp20;
    temp20= 1;
    float3 temp21;
    f= temp20;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp22;
    float3 temp23;
    float3 temp24;
    temp24= e.rgb*f.rgb;
    temp23= temp24;
    float temp25;
    temp25= 1-saturate(tex0.b);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp28;
    float temp29;
    temp29= 0;
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp22;
    r0.a= temp28;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=1 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 42: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 43: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 45: R0= R0 - D0*D0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 68: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    temp28= 2 * temp28;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=2 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 49: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 50: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 52: R0= 1 - D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    temp20= temp23;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 68: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp25;
    float3 temp26;
    temp26= saturate(r0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= saturate(tex0.rgb);
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    temp25= 2 * temp25;
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp31;
    temp31= saturate(r0.rgb);
    float3 temp32;
    e= temp31;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp33;
    temp33= 1;
    float3 temp34;
    f= temp33;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp35;
    float3 temp36;
    float3 temp37;
    temp37= e.rgb*f.rgb;
    temp36= temp37;
    float temp38;
    temp38= 1-saturate(tex0.b);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r0.rgb= temp35;
    r0.a= temp41;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=3 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 56: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 57: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 59: R0= 1 - D0*D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 68: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    temp28= 2 * temp28;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=0 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3
    // line 71: R0= OUT_SCALE_BY_4(R0*T0)
    float3 temp12;
    float3 temp13;
    temp13= saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= saturate(tex0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    temp12= 4 * temp12;
    r0.rgb= temp12;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp18;
    temp18= saturate(r0.rgb);
    float3 temp19;
    e= temp18;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp20;
    temp20= 1;
    float3 temp21;
    f= temp20;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp22;
    float3 temp23;
    float3 temp24;
    temp24= e.rgb*f.rgb;
    temp23= temp24;
    float temp25;
    temp25= 1-saturate(tex0.b);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp22= temp27;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp28;
    float temp29;
    temp29= 0;
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp22;
    r0.a= temp28;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=1 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 42: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 43: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 45: R0= R0 - D0*D0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 71: R0= OUT_SCALE_BY_4(R0*T0)
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    temp28= 4 * temp28;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=2 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 49: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 50: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 52: R0= 1 - D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    temp20= temp23;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 71: R0= OUT_SCALE_BY_4(R0*T0)
    float3 temp25;
    float3 temp26;
    temp26= saturate(r0.rgb);
    float3 temp27;
    float3 temp28;
    temp28= saturate(tex0.rgb);
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    temp25= 4 * temp25;
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp31;
    temp31= saturate(r0.rgb);
    float3 temp32;
    e= temp31;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp33;
    temp33= 1;
    float3 temp34;
    f= temp33;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp35;
    float3 temp36;
    float3 temp37;
    temp37= e.rgb*f.rgb;
    temp36= temp37;
    float temp38;
    temp38= 1-saturate(tex0.b);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r0.rgb= temp35;
    r0.a= temp41;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_diffuse_contrast=3 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=1 term=1
    // line 26: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 56: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c1.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=3 term=3
    // line 57: D0= INVERT(R0)*INVERT(R0)
    float3 temp12;
    float3 temp13;
    temp13= 1-saturate(r0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= 1-saturate(r0.rgb);
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp6;
    color0.rgb= temp12;
    // exp.components=3 term=1 term=3
    // line 59: R0= 1 - D0*D0
    float3 temp18;
    float temp19;
    float3 temp20;
    float temp21;
    temp21= 1;
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= saturate(color0.rgb);
    float3 temp24;
    float3 temp25;
    temp25= saturate(color0.rgb);
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    r0.rgb= temp18;
    // exp.components=3 term=3
    // line 71: R0= OUT_SCALE_BY_4(R0*T0)
    float3 temp28;
    float3 temp29;
    temp29= saturate(r0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(tex0.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    temp28= 4 * temp28;
    r0.rgb= temp28;
    // exp.components=3 term=3
    // line 75: E= R0
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    e= temp34;
    // exp.components=1 term=1
    // line 76: F= 1
    float temp36;
    temp36= 1;
    float3 temp37;
    f= temp36;
    // exp.components=3 term=3
    // line 78: SRCCOLOR= EF*INVERT(T0b)
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float temp41;
    temp41= 1-saturate(tex0.b);
    float3 temp42;
    float3 temp43;
    temp43= temp39 * temp41;
    temp38= temp43;
    // exp.components=1 term=1
    // line 79: SRCALPHA= 0
    float temp44;
    float temp45;
    temp45= 0;
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp38;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
