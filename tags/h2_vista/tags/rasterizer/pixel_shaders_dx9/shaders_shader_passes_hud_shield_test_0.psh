; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_hud_shield_test_0.txt
;
#const C1.rgb= $gradient_min_color
#const C1.a= $flash_leading_edge_position
#const C2.rgb= $gradient_max_color
#const C3.rgb= $gradient_max_color
#const C4.rgb= $flash_color
#const C4.a= $flash_extension
#const C5.rgb= $background_color
#const C6.a= $global_alpha
#const C7.a= $meter_brightness
sampler2D s0 : register(S0);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 c6 : register(C6);
float4 c7 : register(C7);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex1;
    float4 tex2;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
    // exp.components=1 term=1 term=1
    // line 10: R0a= OUT_SCALE_BY_4(C1a*T0b + C1a*T0b)
    float temp0;
    float temp1;
    float temp2;
    float temp3;
    temp3= 1.000000;
    float3 temp4;
    float temp5;
    temp5= saturate(tex0.b);
    float3 temp6;
    float temp7;
    temp7= temp3 * temp5;
    temp1= temp7;
    float temp8;
    temp8= 1.000000;
    float3 temp9;
    float temp10;
    temp10= saturate(tex0.b);
    float3 temp11;
    float temp12;
    temp12= temp8 * temp10;
    temp2= temp12;
    temp0= temp1 + temp2;
    temp0= 4 * temp0;
    // exp.components=3 term=1 term=3
    // line 11: R0= OUT_SCALE_BY_4(C0a + NEGATE(T0))
    float3 temp13;
    float temp14;
    float3 temp15;
    float temp16;
    temp16= c1.a;
    float3 temp17;
    temp14= temp16;
    float3 temp18;
    temp18= -saturate(tex0.rgb);
    float3 temp19;
    temp15= temp18;
    temp13= temp14 + temp15;
    temp13= 4 * temp13;
    r0.a= temp0;
    r0.rgb= temp13;
    // exp.components=1 term=1
    // line 16: R0a= EXPAND_NEGATE(R0b)
    float temp20;
    float temp21;
    temp21= 1 - 2 * saturate(r0.b);
    float3 temp22;
    temp20= temp21;
    // exp.components=3 term=3 term=3
    // line 17: R0= INVERT(R0a)*C0 + R0a*C1
    float3 temp23;
    float3 temp24;
    float3 temp25;
    float temp26;
    temp26= 1-saturate(r0.a);
    float3 temp27;
    float3 temp28;
    temp28= c1.rgb;
    float3 temp29;
    float3 temp30;
    temp30= temp26 * temp28;
    temp24= temp30;
    float temp31;
    temp31= saturate(r0.a);
    float3 temp32;
    float3 temp33;
    temp33= c3.rgb;
    float3 temp34;
    float3 temp35;
    temp35= temp31 * temp33;
    temp25= temp35;
    temp23= temp24 + temp25;
    r0.a= temp20;
    r0.rgb= temp23;
    // exp.components=1 term=1 term=1
    // line 23: R0a= T0b + HALF_BIAS_NEGATE(C1a)
    float temp36;
    float temp37;
    float temp38;
    float temp39;
    temp39= saturate(tex0.b);
    float3 temp40;
    temp37= temp39;
    float temp41;
    temp41= 0.5 - c4.a;
    float3 temp42;
    temp38= temp41;
    temp36= temp37 + temp38;
    // exp.components=3 term=3 term=3
    // line 24: R0= R0 + C1
    float3 temp43;
    float3 temp44;
    float3 temp45;
    float3 temp46;
    temp46= saturate(r0.rgb);
    float3 temp47;
    temp44= temp46;
    float3 temp48;
    temp48= c4.rgb;
    float3 temp49;
    temp45= temp48;
    temp43= temp44 + temp45;
    r0.a= temp36;
    r0.rgb= temp43;
    // exp.components=1 term=1 term=1
    // line 28: R0a= C0a mux C1a
    float temp50;
    float temp51;
    float temp52;
    float temp53;
    temp53= 1.000000;
    float3 temp54;
    temp51= temp53;
    float temp55;
    temp55= 0;
    float3 temp56;
    temp52= temp55;
    temp50= lerp(temp51,temp52,round(r0.a));
    // exp.components=3 term=3 term=3
    // line 29: R0= R0 mux C0
    float3 temp57;
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    temp58= temp60;
    float3 temp62;
    temp62= c5.rgb;
    float3 temp63;
    temp59= temp62;
    temp57= lerp(temp58,temp59,round(r0.a));
    r0.a= temp50;
    r0.rgb= temp57;
    // exp.components=1 term=1
    // line 33: R0a= R0a*C0a
    float temp64;
    float temp65;
    temp65= saturate(r0.a);
    float3 temp66;
    float temp67;
    temp67= c6.a;
    float3 temp68;
    float temp69;
    temp69= temp65 * temp67;
    temp64= temp69;
    // exp.components=3 term=3
    // line 34: R0= R0*C1a
    float3 temp70;
    float3 temp71;
    temp71= saturate(r0.rgb);
    float3 temp72;
    float temp73;
    temp73= c7.a;
    float3 temp74;
    float3 temp75;
    temp75= temp71 * temp73;
    temp70= temp75;
    r0.a= temp64;
    r0.rgb= temp70;
    // exp.components=3 term=3
    // line 36: SRCCOLOR= OUT_SCALE_BY_2(R0*T0a)
    float3 temp76;
    float3 temp77;
    temp77= saturate(r0.rgb);
    float3 temp78;
    float temp79;
    temp79= saturate(tex0.a);
    float3 temp80;
    float3 temp81;
    temp81= temp77 * temp79;
    temp76= temp81;
    temp76= 2 * temp76;
    // exp.components=1 term=1
    // line 37: SRCALPHA= R0a*T0a
    float temp82;
    float temp83;
    temp83= saturate(r0.a);
    float3 temp84;
    float temp85;
    temp85= saturate(tex0.a);
    float3 temp86;
    float temp87;
    temp87= temp83 * temp85;
    temp82= temp87;
    r0.rgb= temp76;
    r0.a= temp82;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
