; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_active_camo_active_camo_opaque_2.txt
;
#const C1.a= $active_camo_amount
sampler2D s0 : register(S0);
sampler2D s1 : register(S1);
sampler2D s2 : register(S2);
samplerCUBE s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 10 dot 1 input-stage 0
    float4 tex1;
// texture stage 2 mode 11 dot 1 input-stage 0
    float2 tc_2d;
    tex0.xy -= float2(0.5f, 0.5f);
    tex0.xy *= 2.0f;
    tc_2d.r= dot(tex0.xyz, tc1.xyz);
    tc_2d.g= dot(tex0.xyz, tc2.xyz);
    float4 tex2= tex2D(s2, tc_2d);
// texture stage 3 mode 2 dot 0 input-stage 0
    float4 tex3= texCUBE(s3, tc3);
    // exp.components=1 term=1
    // line 14: R0a= EXPAND(D0b)
    float temp0;
    float temp1;
    temp1= 2 * saturate(color0.b) - 1;
    float3 temp2;
    temp0= temp1;
    // exp.components=3 term=3
    // line 15: D0= T2*T2
    float3 temp3;
    float3 temp4;
    temp4= saturate(tex2.rgb);
    float3 temp5;
    float3 temp6;
    temp6= saturate(tex2.rgb);
    float3 temp7;
    float3 temp8;
    temp8= temp4 * temp6;
    temp3= temp8;
    r0.a= temp0;
    color0.rgb= temp3;
    // exp.components=1 term=1
    // line 17: R0a= INVERT(R0a)*INVERT(R0a)
    float temp9;
    float temp10;
    temp10= 1-saturate(r0.a);
    float3 temp11;
    float temp12;
    temp12= 1-saturate(r0.a);
    float3 temp13;
    float temp14;
    temp14= temp10 * temp12;
    temp9= temp14;
    r0.a= temp9;
    // exp.components=1 term=1
    // line 20: R1a=C0a
    float temp15;
    float temp16;
    temp16= c1.a;
    float3 temp17;
    temp15= temp16;
    // exp.components=3 term=3
    // line 21: R0= T2*C0a
    float3 temp18;
    float3 temp19;
    temp19= saturate(tex2.rgb);
    float3 temp20;
    float temp21;
    temp21= c1.a;
    float3 temp22;
    float3 temp23;
    temp23= temp19 * temp21;
    temp18= temp23;
    // exp.components=1 term=1
    // line 22: R0a= R0a*C0a
    float temp24;
    float temp25;
    temp25= saturate(r0.a);
    float3 temp26;
    float temp27;
    temp27= c1.a;
    float3 temp28;
    float temp29;
    temp29= temp25 * temp27;
    temp24= temp29;
    r1.a= temp15;
    r0.rgb= temp18;
    r0.a= temp24;
    // exp.components=1 term=1
    // line 25: E= R0a
    float temp30;
    temp30= saturate(r0.a);
    float3 temp31;
    e= temp30;
    // exp.components=1 term=1
    // line 27: F=INVERT(T0b)
    float temp32;
    temp32= 1-saturate(tex0.b);
    float3 temp33;
    f= temp32;
    // exp.components=3 term=3 term=3
    // line 28: SRCCOLOR= D0*EF + R0
    float3 temp34;
    float3 temp35;
    float3 temp36;
    float3 temp37;
    temp37= saturate(color0.rgb);
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float3 temp41;
    temp41= temp37 * temp39;
    temp35= temp41;
    float3 temp42;
    temp42= saturate(r0.rgb);
    float3 temp43;
    temp36= temp42;
    temp34= temp35 + temp36;
    // exp.components=1 term=1
    // line 29: SRCALPHA= R1a
    float temp44;
    float temp45;
    temp45= saturate(r1.a);
    float3 temp46;
    temp44= temp45;
    r0.rgb= temp34;
    r0.a= temp44;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
