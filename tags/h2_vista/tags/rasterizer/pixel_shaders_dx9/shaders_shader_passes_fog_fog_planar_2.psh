; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_fog_fog_planar_2.txt
;
#const C1.a= $fog_planar_eye_density_adjusted_invert
#const C2.a= $fog_planar_eye_density_adjusted
#const C3.rgb= $fog_planar_color
sampler2D s1 : register(S1);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex0;
    float4 tex2;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 1 mode 0 dot 0 input-stage 0
    float4 tex1= tex2Dproj(s1, tc1);
    // exp.components=1 term=1 term=1
    // line 10: D0a= T1a*C0a + T1b*C1a
    float temp0;
    float temp1;
    float temp2;
    float temp3;
    temp3= saturate(tex1.a);
    float3 temp4;
    float temp5;
    temp5= c1.a;
    float3 temp6;
    float temp7;
    temp7= temp3 * temp5;
    temp1= temp7;
    float temp8;
    temp8= saturate(tex1.b);
    float3 temp9;
    float temp10;
    temp10= c2.a;
    float3 temp11;
    float temp12;
    temp12= temp8 * temp10;
    temp2= temp12;
    temp0= temp1 + temp2;
    color0.a= temp0;
    // exp.components=3 term=3
    // line 13: SRCCOLOR= C0*D0a
    float3 temp13;
    float3 temp14;
    temp14= c3.rgb;
    float3 temp15;
    float temp16;
    temp16= saturate(color0.a);
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp13= temp18;
    // exp.components=1 term=1
    // line 14: SRCALPHA= D0a
    float temp19;
    float temp20;
    temp20= saturate(color0.a);
    float3 temp21;
    temp19= temp20;
    r0.rgb= temp13;
    r0.a= temp19;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
