; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_plasma_overshield_tartarus_0.txt
;
sampler3D s0 : register(S0);
sampler3D s1 : register(S1);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex2;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 1 dot 0 input-stage 0
    float4 tex0= tex3Dproj(s0, tc0);
// texture stage 1 mode 1 dot 0 input-stage 0
    float4 tex1= tex3Dproj(s1, tc1);
    // exp.components=3 term=3
    // line 10: R0= R0
    float3 temp0;
    float3 temp1;
    temp1= saturate(r0.rgb);
    float3 temp2;
    temp0= temp1;
    r0.rgb= temp0;
    // exp.components=1 term=1
    // line 12: SRCCOLOR= 0
    float temp3;
    float temp4;
    temp4= 0;
    float3 temp5;
    temp3= temp4;
    // exp.components=1 term=1
    // line 13: SRCALPHA= D0b
    float temp6;
    float temp7;
    temp7= saturate(color0.b);
    float3 temp8;
    temp6= temp7;
    r0.rgb= temp3;
    r0.a= temp6;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
