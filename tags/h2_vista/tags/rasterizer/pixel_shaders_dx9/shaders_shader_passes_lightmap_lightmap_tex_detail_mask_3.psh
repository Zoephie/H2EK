; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_lightmap_lightmap_tex_detail_mask_3.txt
;
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
samplerCUBE s3 : register(S3);
sampler2D s4 : register(S4);
sampler2D s5 : register(S5);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
#ifdef CENTROID4
    float4 tc4 : TEXCOORD4_centroid,
#else
    float4 tc4 : TEXCOORD4,
#endif
#ifdef CENTROID5
    float4 tc5 : TEXCOORD5_centroid,
#else
    float4 tc5 : TEXCOORD5,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 2 dot 0 input-stage 0
    float4 tex3= texCUBE(s3, tc3);
// texture stage 4 mode 0 dot 0 input-stage 0
    float4 tex4= tex2Dproj(s4, tc4);
// texture stage 5 mode 0 dot 0 input-stage 0
    float4 tex5= tex2Dproj(s5, tc5);
    // exp.components=1 term=1
    // line 25: R0a= T5b
    float temp0;
    float temp1;
    temp1= saturate(tex5.b);
    float3 temp2;
    temp0= temp1;
    r0.a= temp0;
    // exp.components=3 term=1 term=3
    // line 27: R0= 1/2*R0a + INVERT(R0a)*T4
    float3 temp3;
    float temp4;
    float3 temp5;
    float temp6;
    temp6= 0.5;
    float3 temp7;
    float temp8;
    temp8= saturate(r0.a);
    float3 temp9;
    float temp10;
    temp10= temp6 * temp8;
    temp4= temp10;
    float temp11;
    temp11= 1-saturate(r0.a);
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex4.rgb);
    float3 temp14;
    float3 temp15;
    temp15= temp11 * temp13;
    temp5= temp15;
    temp3= temp4 + temp5;
    r0.rgb= temp3;
    // exp.components=3 term=3
    // line 29: T0= OUT_SCALE_BY_2(R0*T0)
    float3 temp16;
    float3 temp17;
    temp17= saturate(r0.rgb);
    float3 temp18;
    float3 temp19;
    temp19= saturate(tex0.rgb);
    float3 temp20;
    float3 temp21;
    temp21= temp17 * temp19;
    temp16= temp21;
    temp16= 2 * temp16;
    tex0.rgb= temp16;
    // exp.components=1 term=1
    // line 31: R0= EXPAND(T2).EXPAND_NEGATE(T3)
    float temp22;
    float3 temp23;
    temp23= 2 * saturate(tex2.rgb) - 1;
    float3 temp24;
    float3 temp25;
    temp25= 1 - 2 * saturate(tex3.rgb);
    float3 temp26;
    float temp27;
    temp27= dot(temp23, temp25);
    temp22= temp27;
    // exp.components=1 term=1
    // line 32: R1= EXPAND(T2).EXPAND(D1)
    float temp28;
    float3 temp29;
    temp29= 2 * saturate(tex2.rgb) - 1;
    float3 temp30;
    float3 temp31;
    temp31= 2 * saturate(color1.rgb) - 1;
    float3 temp32;
    float temp33;
    temp33= dot(temp29, temp31);
    temp28= temp33;
    r0.rgb= temp22;
    r1.rgb= temp28;
    // exp.components=3 term=3 term=3
    // line 37: R0= R0*C0 + R1*C1
    float3 temp34;
    float3 temp35;
    float3 temp36;
    float3 temp37;
    temp37= saturate(r0.rgb);
    float3 temp38;
    float3 temp39;
    temp39= float3(0.501961,0.490196,0.470588);
    float3 temp40;
    float3 temp41;
    temp41= temp37 * temp39;
    temp35= temp41;
    float3 temp42;
    temp42= saturate(r1.rgb);
    float3 temp43;
    float3 temp44;
    temp44= float3(0.372549,0.352941,0.333333);
    float3 temp45;
    float3 temp46;
    temp46= temp42 * temp44;
    temp36= temp46;
    temp34= temp35 + temp36;
    r0.rgb= temp34;
    // exp.components=1 term=1
    // line 41: R1= R0.C1a
    float temp47;
    float3 temp48;
    temp48= saturate(r0.rgb);
    float3 temp49;
    float temp50;
    temp50= 0.752941;
    float3 temp51;
    float temp52;
    temp52= dot(temp48, temp50);
    temp47= temp52;
    r1.rgb= temp47;
    // exp.components=3 term=3 term=3
    // line 45: R0= OUT_SCALE_BY_2(R0*T0 + C0*T0)
    float3 temp53;
    float3 temp54;
    float3 temp55;
    float3 temp56;
    temp56= saturate(r0.rgb);
    float3 temp57;
    float3 temp58;
    temp58= saturate(tex0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= temp56 * temp58;
    temp54= temp60;
    float3 temp61;
    temp61= float3(0.062745,0.062745,0.062745);
    float3 temp62;
    float3 temp63;
    temp63= saturate(tex0.rgb);
    float3 temp64;
    float3 temp65;
    temp65= temp61 * temp63;
    temp55= temp65;
    temp53= temp54 + temp55;
    temp53= 2 * temp53;
    // exp.components=1 term=1
    // line 46: D0a= OUT_SCALE_BY_2(R1b*T0a)
    float temp66;
    float temp67;
    temp67= saturate(r1.b);
    float3 temp68;
    float temp69;
    temp69= saturate(tex0.a);
    float3 temp70;
    float temp71;
    temp71= temp67 * temp69;
    temp66= temp71;
    temp66= 2 * temp66;
    r0.rgb= temp53;
    color0.a= temp66;
    // exp.components=3 term=3
    // line 49: SRCCOLOR= R0
    float3 temp72;
    float3 temp73;
    temp73= saturate(r0.rgb);
    float3 temp74;
    temp72= temp73;
    // exp.components=1 term=1
    // line 50: SRCALPHA= D0a
    float temp75;
    float temp76;
    temp76= saturate(color0.a);
    float3 temp77;
    temp75= temp76;
    r0.rgb= temp72;
    r0.a= temp75;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
