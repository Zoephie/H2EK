; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_texture_mapping_texture_zoe_0.txt
;
sampler2D s0 : register(S0);
sampler2D s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 0 dot 0 input-stage 0
    float4 tex1= tex2Dproj(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1 term=1
    // line 13: R0a= OUT_SCALE_BY_2(T1a - T0a)
    float temp0;
    float temp1;
    float temp2;
    float temp3;
    temp3= saturate(tex1.a);
    float3 temp4;
    temp1= temp3;
    float temp5;
    temp5= saturate(tex0.a);
    float3 temp6;
    temp2= temp5;
    temp0= temp1 - temp2;
    temp0= 2 * temp0;
    r0.a= temp0;
    // exp.components=1 term=1
    // line 15: R0a= OUT_SCALE_BY_2(SIGNED(R0a))
    float temp7;
    float temp8;
    temp8= r0.a;
    float3 temp9;
    temp7= temp8;
    temp7= 2 * temp7;
    r0.a= temp7;
    // exp.components=1 term=1 term=1
    // line 17: R1a= OUT_SCALE_BY_2(R0a mux INVERT(R0a))
    float temp10;
    float temp11;
    float temp12;
    float temp13;
    temp13= saturate(r0.a);
    float3 temp14;
    temp11= temp13;
    float temp15;
    temp15= 1-saturate(r0.a);
    float3 temp16;
    temp12= temp15;
    temp10= lerp(temp11,temp12,round(r0.a));
    temp10= 2 * temp10;
    r1.a= temp10;
    // exp.components=1 term=1 term=1
    // line 19: R1a= OUT_SCALE_BY_4(R1a + R1a)
    float temp17;
    float temp18;
    float temp19;
    float temp20;
    temp20= saturate(r1.a);
    float3 temp21;
    temp18= temp20;
    float temp22;
    temp22= saturate(r1.a);
    float3 temp23;
    temp19= temp22;
    temp17= temp18 + temp19;
    temp17= 4 * temp17;
    r1.a= temp17;
    // exp.components=1 term=1 term=1
    // line 21: R0a= SIGNED(R0a) + R1a*EXPAND(T2a)
    float temp24;
    float temp25;
    float temp26;
    float temp27;
    temp27= r0.a;
    float3 temp28;
    temp25= temp27;
    float temp29;
    temp29= saturate(r1.a);
    float3 temp30;
    float temp31;
    temp31= 2 * saturate(tex2.a) - 1;
    float3 temp32;
    float temp33;
    temp33= temp29 * temp31;
    temp26= temp33;
    temp24= temp25 + temp26;
    r0.a= temp24;
    // exp.components=3 term=3
    // line 23: R0= OUT_SCALE_BY_2(T0*T2)
    float3 temp34;
    float3 temp35;
    temp35= saturate(tex0.rgb);
    float3 temp36;
    float3 temp37;
    temp37= saturate(tex2.rgb);
    float3 temp38;
    float3 temp39;
    temp39= temp35 * temp37;
    temp34= temp39;
    temp34= 2 * temp34;
    // exp.components=3 term=3
    // line 24: R1= OUT_SCALE_BY_2(T0*T1)
    float3 temp40;
    float3 temp41;
    temp41= saturate(tex0.rgb);
    float3 temp42;
    float3 temp43;
    temp43= saturate(tex1.rgb);
    float3 temp44;
    float3 temp45;
    temp45= temp41 * temp43;
    temp40= temp45;
    temp40= 2 * temp40;
    // exp.components=1 term=1 term=1
    // line 25: R0a= 1/2*SIGNED(R0a) + 1/2
    float temp46;
    float temp47;
    float temp48;
    float temp49;
    temp49= 0.5;
    float3 temp50;
    float temp51;
    temp51= r0.a;
    float3 temp52;
    float temp53;
    temp53= temp49 * temp51;
    temp47= temp53;
    float temp54;
    temp54= 0.5;
    float3 temp55;
    temp48= temp54;
    temp46= temp47 + temp48;
    r0.rgb= temp34;
    r1.rgb= temp40;
    r0.a= temp46;
    // exp.components=3 term=3 term=3
    // line 27: R0= R0*INVERT(R0a) + R1*R0a
    float3 temp56;
    float3 temp57;
    float3 temp58;
    float3 temp59;
    temp59= saturate(r0.rgb);
    float3 temp60;
    float temp61;
    temp61= 1-saturate(r0.a);
    float3 temp62;
    float3 temp63;
    temp63= temp59 * temp61;
    temp57= temp63;
    float3 temp64;
    temp64= saturate(r1.rgb);
    float3 temp65;
    float temp66;
    temp66= saturate(r0.a);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp58= temp68;
    temp56= temp57 + temp58;
    // exp.components=1 term=1 term=1
    // line 28: R0a= 1/2*INVERT(R0a) + T3b*R0a
    float temp69;
    float temp70;
    float temp71;
    float temp72;
    temp72= 0.5;
    float3 temp73;
    float temp74;
    temp74= 1-saturate(r0.a);
    float3 temp75;
    float temp76;
    temp76= temp72 * temp74;
    temp70= temp76;
    float temp77;
    temp77= saturate(tex3.b);
    float3 temp78;
    float temp79;
    temp79= saturate(r0.a);
    float3 temp80;
    float temp81;
    temp81= temp77 * temp79;
    temp71= temp81;
    temp69= temp70 + temp71;
    r0.rgb= temp56;
    r0.a= temp69;
    // exp.components=3 term=3
    // line 30: R0= OUT_SCALE_BY_2(R0*R0a)
    float3 temp82;
    float3 temp83;
    temp83= saturate(r0.rgb);
    float3 temp84;
    float temp85;
    temp85= saturate(r0.a);
    float3 temp86;
    float3 temp87;
    temp87= temp83 * temp85;
    temp82= temp87;
    temp82= 2 * temp82;
    r0.rgb= temp82;
    // exp.components=3 term=3
    // line 32: SRCCOLOR= R0
    float3 temp88;
    float3 temp89;
    temp89= saturate(r0.rgb);
    float3 temp90;
    temp88= temp89;
    // exp.components=1 term=1
    // line 33: SRCALPHA= 1
    float temp91;
    float temp92;
    temp92= 1;
    float3 temp93;
    temp91= temp92;
    r0.rgb= temp88;
    r0.a= temp91;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
