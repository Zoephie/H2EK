; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_environment_mapping_default_environment_map_tangent_space_fast_0.txt
;
sampler2D s0 : register(S0);
samplerCUBE s2 : register(S2);
samplerCUBE s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 2 mode 2 dot 0 input-stage 0
    float4 tex2= texCUBE(s2, tc2);
// texture stage 3 mode 2 dot 0 input-stage 0
    float4 tex3= texCUBE(s3, tc3);
    // exp.components=1 term=1
    // line 14: R0= EXPAND(T2).EXPAND(T0)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex0.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 20: R0= INVERT(R0)*D1 + R0*D0
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= 1-saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= saturate(color1.rgb);
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= saturate(color0.rgb);
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    // exp.components=1 term=1 term=1
    // line 21: R0a= INVERT(R0b)*D1a + R0b*D0a
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= 1-saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(color1.a);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= saturate(r0.b);
    float3 temp28;
    float temp29;
    temp29= saturate(color0.a);
    float3 temp30;
    float temp31;
    temp31= temp27 * temp29;
    temp21= temp31;
    temp19= temp20 + temp21;
    r0.rgb= temp6;
    r0.a= temp19;
    // exp.components=3 term=3
    // line 23: E= T3
    float3 temp32;
    temp32= saturate(tex3.rgb);
    float3 temp33;
    e= temp32;
    // exp.components=1 term=1
    // line 24: F= R0a
    float temp34;
    temp34= saturate(r0.a);
    float3 temp35;
    f= temp34;
    // exp.components=3 term=3
    // line 25: SRCCOLOR= R0*EF
    float3 temp36;
    float3 temp37;
    temp37= saturate(r0.rgb);
    float3 temp38;
    float3 temp39;
    float3 temp40;
    temp40= e.rgb*f.rgb;
    temp39= temp40;
    float3 temp41;
    temp41= temp37 * temp39;
    temp36= temp41;
    r0.rgb= temp36;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
