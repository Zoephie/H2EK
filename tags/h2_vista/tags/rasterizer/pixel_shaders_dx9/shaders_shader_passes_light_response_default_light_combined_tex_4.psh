; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_light_response_default_light_combined_tex_4.txt
;
#const C1.rgb= $specular_color
#const C2.rgb= $specular_glancing_color
#const C4.rgb= $light_diffuse_color
#const C5.rgb= $light_specular_color
#case $specular_type=0 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 51: R1a= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 70: R0= R0*T0 + R1*T0a
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=1 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 54: R1a= R1a*R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= temp42 * temp44;
    temp41= temp46;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp47;
    float3 temp48;
    temp48= saturate(r1.rgb);
    float3 temp49;
    float temp50;
    temp50= saturate(r1.a);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp47= temp52;
    r1.rgb= temp47;
    // exp.components=3 term=3 term=3
    // line 70: R0= R0*T0 + R1*T0a
    float3 temp53;
    float3 temp54;
    float3 temp55;
    float3 temp56;
    temp56= saturate(r0.rgb);
    float3 temp57;
    float3 temp58;
    temp58= saturate(tex0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= temp56 * temp58;
    temp54= temp60;
    float3 temp61;
    temp61= saturate(r1.rgb);
    float3 temp62;
    float temp63;
    temp63= saturate(tex0.a);
    float3 temp64;
    float3 temp65;
    temp65= temp61 * temp63;
    temp55= temp65;
    temp53= temp54 + temp55;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp66;
    float3 temp67;
    temp67= saturate(r0.rgb);
    float3 temp68;
    float3 temp69;
    temp69= 1-saturate(color0.rgb);
    float3 temp70;
    float3 temp71;
    temp71= temp67 * temp69;
    temp66= temp71;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp72;
    float temp73;
    temp73= 0;
    float3 temp74;
    temp72= temp73;
    r0.rgb= temp66;
    r0.a= temp72;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=2 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 57: R1a= R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 70: R0= R0*T0 + R1*T0a
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=3 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1 term=1
    // line 61: R1a= OUT_SCALE_BY_4(R1a*R1a - C0a)
    float temp41;
    float temp42;
    float temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= saturate(r1.a);
    float3 temp47;
    float temp48;
    temp48= temp44 * temp46;
    temp42= temp48;
    float temp49;
    temp49= 0.752941;
    float3 temp50;
    temp43= temp49;
    temp41= temp42 - temp43;
    temp41= 4 * temp41;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp51;
    float3 temp52;
    temp52= saturate(r1.rgb);
    float3 temp53;
    float temp54;
    temp54= saturate(r1.a);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    r1.rgb= temp51;
    // exp.components=3 term=3 term=3
    // line 70: R0= R0*T0 + R1*T0a
    float3 temp57;
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= saturate(tex0.rgb);
    float3 temp63;
    float3 temp64;
    temp64= temp60 * temp62;
    temp58= temp64;
    float3 temp65;
    temp65= saturate(r1.rgb);
    float3 temp66;
    float temp67;
    temp67= saturate(tex0.a);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp59= temp69;
    temp57= temp58 + temp59;
    r0.rgb= temp57;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp70;
    float3 temp71;
    temp71= saturate(r0.rgb);
    float3 temp72;
    float3 temp73;
    temp73= 1-saturate(color0.rgb);
    float3 temp74;
    float3 temp75;
    temp75= temp71 * temp73;
    temp70= temp75;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp76;
    float temp77;
    temp77= 0;
    float3 temp78;
    temp76= temp77;
    r0.rgb= temp70;
    r0.a= temp76;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=0 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 51: R1a= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 73: R0= OUT_SCALE_BY_2(R0*T0 + R1*T0a)
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    temp50= 2 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=1 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 54: R1a= R1a*R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= temp42 * temp44;
    temp41= temp46;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp47;
    float3 temp48;
    temp48= saturate(r1.rgb);
    float3 temp49;
    float temp50;
    temp50= saturate(r1.a);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp47= temp52;
    r1.rgb= temp47;
    // exp.components=3 term=3 term=3
    // line 73: R0= OUT_SCALE_BY_2(R0*T0 + R1*T0a)
    float3 temp53;
    float3 temp54;
    float3 temp55;
    float3 temp56;
    temp56= saturate(r0.rgb);
    float3 temp57;
    float3 temp58;
    temp58= saturate(tex0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= temp56 * temp58;
    temp54= temp60;
    float3 temp61;
    temp61= saturate(r1.rgb);
    float3 temp62;
    float temp63;
    temp63= saturate(tex0.a);
    float3 temp64;
    float3 temp65;
    temp65= temp61 * temp63;
    temp55= temp65;
    temp53= temp54 + temp55;
    temp53= 2 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp66;
    float3 temp67;
    temp67= saturate(r0.rgb);
    float3 temp68;
    float3 temp69;
    temp69= 1-saturate(color0.rgb);
    float3 temp70;
    float3 temp71;
    temp71= temp67 * temp69;
    temp66= temp71;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp72;
    float temp73;
    temp73= 0;
    float3 temp74;
    temp72= temp73;
    r0.rgb= temp66;
    r0.a= temp72;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=2 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 57: R1a= R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 73: R0= OUT_SCALE_BY_2(R0*T0 + R1*T0a)
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    temp50= 2 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=3 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1 term=1
    // line 61: R1a= OUT_SCALE_BY_4(R1a*R1a - C0a)
    float temp41;
    float temp42;
    float temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= saturate(r1.a);
    float3 temp47;
    float temp48;
    temp48= temp44 * temp46;
    temp42= temp48;
    float temp49;
    temp49= 0.752941;
    float3 temp50;
    temp43= temp49;
    temp41= temp42 - temp43;
    temp41= 4 * temp41;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp51;
    float3 temp52;
    temp52= saturate(r1.rgb);
    float3 temp53;
    float temp54;
    temp54= saturate(r1.a);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    r1.rgb= temp51;
    // exp.components=3 term=3 term=3
    // line 73: R0= OUT_SCALE_BY_2(R0*T0 + R1*T0a)
    float3 temp57;
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= saturate(tex0.rgb);
    float3 temp63;
    float3 temp64;
    temp64= temp60 * temp62;
    temp58= temp64;
    float3 temp65;
    temp65= saturate(r1.rgb);
    float3 temp66;
    float temp67;
    temp67= saturate(tex0.a);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp59= temp69;
    temp57= temp58 + temp59;
    temp57= 2 * temp57;
    r0.rgb= temp57;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp70;
    float3 temp71;
    temp71= saturate(r0.rgb);
    float3 temp72;
    float3 temp73;
    temp73= 1-saturate(color0.rgb);
    float3 temp74;
    float3 temp75;
    temp75= temp71 * temp73;
    temp70= temp75;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp76;
    float temp77;
    temp77= 0;
    float3 temp78;
    temp76= temp77;
    r0.rgb= temp70;
    r0.a= temp76;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=0 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 51: R1a= 0
    float temp41;
    float temp42;
    temp42= 0;
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 76: R0= OUT_SCALE_BY_4(R0*T0 + R1*T0a)
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    temp50= 4 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=1 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 54: R1a= R1a*R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= temp42 * temp44;
    temp41= temp46;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp47;
    float3 temp48;
    temp48= saturate(r1.rgb);
    float3 temp49;
    float temp50;
    temp50= saturate(r1.a);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp47= temp52;
    r1.rgb= temp47;
    // exp.components=3 term=3 term=3
    // line 76: R0= OUT_SCALE_BY_4(R0*T0 + R1*T0a)
    float3 temp53;
    float3 temp54;
    float3 temp55;
    float3 temp56;
    temp56= saturate(r0.rgb);
    float3 temp57;
    float3 temp58;
    temp58= saturate(tex0.rgb);
    float3 temp59;
    float3 temp60;
    temp60= temp56 * temp58;
    temp54= temp60;
    float3 temp61;
    temp61= saturate(r1.rgb);
    float3 temp62;
    float temp63;
    temp63= saturate(tex0.a);
    float3 temp64;
    float3 temp65;
    temp65= temp61 * temp63;
    temp55= temp65;
    temp53= temp54 + temp55;
    temp53= 4 * temp53;
    r0.rgb= temp53;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp66;
    float3 temp67;
    temp67= saturate(r0.rgb);
    float3 temp68;
    float3 temp69;
    temp69= 1-saturate(color0.rgb);
    float3 temp70;
    float3 temp71;
    temp71= temp67 * temp69;
    temp66= temp71;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp72;
    float temp73;
    temp73= 0;
    float3 temp74;
    temp72= temp73;
    r0.rgb= temp66;
    r0.a= temp72;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=2 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1
    // line 57: R1a= R1a
    float temp41;
    float temp42;
    temp42= saturate(r1.a);
    float3 temp43;
    temp41= temp42;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp44;
    float3 temp45;
    temp45= saturate(r1.rgb);
    float3 temp46;
    float temp47;
    temp47= saturate(r1.a);
    float3 temp48;
    float3 temp49;
    temp49= temp45 * temp47;
    temp44= temp49;
    r1.rgb= temp44;
    // exp.components=3 term=3 term=3
    // line 76: R0= OUT_SCALE_BY_4(R0*T0 + R1*T0a)
    float3 temp50;
    float3 temp51;
    float3 temp52;
    float3 temp53;
    temp53= saturate(r0.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(tex0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp51= temp57;
    float3 temp58;
    temp58= saturate(r1.rgb);
    float3 temp59;
    float temp60;
    temp60= saturate(tex0.a);
    float3 temp61;
    float3 temp62;
    temp62= temp58 * temp60;
    temp52= temp62;
    temp50= temp51 + temp52;
    temp50= 4 * temp50;
    r0.rgb= temp50;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp63;
    float3 temp64;
    temp64= saturate(r0.rgb);
    float3 temp65;
    float3 temp66;
    temp66= 1-saturate(color0.rgb);
    float3 temp67;
    float3 temp68;
    temp68= temp64 * temp66;
    temp63= temp68;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp69;
    float temp70;
    temp70= 0;
    float3 temp71;
    temp69= temp70;
    r0.rgb= temp63;
    r0.a= temp69;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $specular_type=3 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 34: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3 term=3
    // line 38: R1= R0*C0 + INVERT(R0)*C1
    float3 temp6;
    float3 temp7;
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= c1.rgb;
    float3 temp12;
    float3 temp13;
    temp13= temp9 * temp11;
    temp7= temp13;
    float3 temp14;
    temp14= 1-saturate(r0.rgb);
    float3 temp15;
    float3 temp16;
    temp16= c2.rgb;
    float3 temp17;
    float3 temp18;
    temp18= temp14 * temp16;
    temp8= temp18;
    temp6= temp7 + temp8;
    r1.rgb= temp6;
    // exp.components=1 term=1 term=1
    // line 41: R1a= OUT_SCALE_BY_4(R0b*R0b - C0a)
    float temp19;
    float temp20;
    float temp21;
    float temp22;
    temp22= saturate(r0.b);
    float3 temp23;
    float temp24;
    temp24= saturate(r0.b);
    float3 temp25;
    float temp26;
    temp26= temp22 * temp24;
    temp20= temp26;
    float temp27;
    temp27= 0.752941;
    float3 temp28;
    temp21= temp27;
    temp19= temp20 - temp21;
    temp19= 4 * temp19;
    r1.a= temp19;
    // exp.components=3 term=3
    // line 45: T0= T0*C0
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c4.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp29= temp34;
    // exp.components=3 term=3
    // line 46: R1= R1*C1
    float3 temp35;
    float3 temp36;
    temp36= saturate(r1.rgb);
    float3 temp37;
    float3 temp38;
    temp38= c5.rgb;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp35= temp40;
    tex0.rgb= temp29;
    r1.rgb= temp35;
    // exp.components=1 term=1 term=1
    // line 61: R1a= OUT_SCALE_BY_4(R1a*R1a - C0a)
    float temp41;
    float temp42;
    float temp43;
    float temp44;
    temp44= saturate(r1.a);
    float3 temp45;
    float temp46;
    temp46= saturate(r1.a);
    float3 temp47;
    float temp48;
    temp48= temp44 * temp46;
    temp42= temp48;
    float temp49;
    temp49= 0.752941;
    float3 temp50;
    temp43= temp49;
    temp41= temp42 - temp43;
    temp41= 4 * temp41;
    r1.a= temp41;
    // exp.components=3 term=3
    // line 65: R1= R1*R1a
    float3 temp51;
    float3 temp52;
    temp52= saturate(r1.rgb);
    float3 temp53;
    float temp54;
    temp54= saturate(r1.a);
    float3 temp55;
    float3 temp56;
    temp56= temp52 * temp54;
    temp51= temp56;
    r1.rgb= temp51;
    // exp.components=3 term=3 term=3
    // line 76: R0= OUT_SCALE_BY_4(R0*T0 + R1*T0a)
    float3 temp57;
    float3 temp58;
    float3 temp59;
    float3 temp60;
    temp60= saturate(r0.rgb);
    float3 temp61;
    float3 temp62;
    temp62= saturate(tex0.rgb);
    float3 temp63;
    float3 temp64;
    temp64= temp60 * temp62;
    temp58= temp64;
    float3 temp65;
    temp65= saturate(r1.rgb);
    float3 temp66;
    float temp67;
    temp67= saturate(tex0.a);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp59= temp69;
    temp57= temp58 + temp59;
    temp57= 4 * temp57;
    r0.rgb= temp57;
    // exp.components=3 term=3
    // line 80: SRCCOLOR= R0*INVERT(D0)
    float3 temp70;
    float3 temp71;
    temp71= saturate(r0.rgb);
    float3 temp72;
    float3 temp73;
    temp73= 1-saturate(color0.rgb);
    float3 temp74;
    float3 temp75;
    temp75= temp71 * temp73;
    temp70= temp75;
    // exp.components=1 term=1
    // line 81: SRCALPHA= 0
    float temp76;
    float temp77;
    temp77= 0;
    float3 temp78;
    temp76= temp77;
    r0.rgb= temp70;
    r0.a= temp76;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
