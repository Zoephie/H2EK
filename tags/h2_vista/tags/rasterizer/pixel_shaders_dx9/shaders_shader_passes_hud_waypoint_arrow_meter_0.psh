; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_hud_waypoint_arrow_meter_0.txt
;
#const C1.a= $theta
#const C5.rgb= $color_1
#const C5.a= $alpha
#const C6.rgb= $color_2
sampler2D s0 : register(S0);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 c4 : register(C4);
float4 c5 : register(C5);
float4 c6 : register(C6);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex1;
    float4 tex2;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
    // exp.components=1 term=1 term=1
    // line 12: R0a= C0a - T0b
    float temp0;
    float temp1;
    float temp2;
    float temp3;
    temp3= c1.a;
    float3 temp4;
    temp1= temp3;
    float temp5;
    temp5= saturate(tex0.b);
    float3 temp6;
    temp2= temp5;
    temp0= temp1 - temp2;
    r0.a= temp0;
    // exp.components=1 term=1 term=1
    // line 15: R0a= SIGNED(R0a) + C0a
    float temp7;
    float temp8;
    float temp9;
    float temp10;
    temp10= r0.a;
    float3 temp11;
    temp8= temp10;
    float temp12;
    temp12= 0.501961;
    float3 temp13;
    temp9= temp12;
    temp7= temp8 + temp9;
    // exp.components=1 term=1
    // line 16: T2= T0a
    float temp14;
    float temp15;
    temp15= saturate(tex0.a);
    float3 temp16;
    temp14= temp15;
    r0.a= temp7;
    tex2.rgb= temp14;
    // exp.components=3 term=3 term=3
    // line 20: T1= C1 mux C0
    float3 temp17;
    float3 temp18;
    float3 temp19;
    float3 temp20;
    temp20= float3(1.000000,1.000000,1.000000);
    float3 temp21;
    temp18= temp20;
    float3 temp22;
    temp22= float3(0.000000,0.000000,0.000000);
    float3 temp23;
    temp19= temp22;
    temp17= lerp(temp18,temp19,round(r0.a));
    // exp.components=1 term=1
    // line 21: R0a= C1b
    float temp24;
    float temp25;
    temp25= 1.000000;
    float3 temp26;
    temp24= temp25;
    tex1.rgb= temp17;
    r0.a= temp24;
    // exp.components=3 term=3 term=3
    // line 26: R0= T1*C0 + T2*C0
    float3 temp27;
    float3 temp28;
    float3 temp29;
    float3 temp30;
    temp30= saturate(tex1.rgb);
    float3 temp31;
    float3 temp32;
    temp32= c5.rgb;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp28= temp34;
    float3 temp35;
    temp35= saturate(tex2.rgb);
    float3 temp36;
    float3 temp37;
    temp37= c5.rgb;
    float3 temp38;
    float3 temp39;
    temp39= temp35 * temp37;
    temp29= temp39;
    temp27= temp28 + temp29;
    // exp.components=1 term=1 term=1
    // line 27: R1a= OUT_SCALE_BY_4(C0a*T2b+C0a*T1b)
    float temp40;
    float temp41;
    float temp42;
    float temp43;
    temp43= c5.a;
    float3 temp44;
    float temp45;
    temp45= saturate(tex2.b);
    float3 temp46;
    float temp47;
    temp47= temp43 * temp45;
    temp41= temp47;
    float temp48;
    temp48= c5.a;
    float3 temp49;
    float temp50;
    temp50= saturate(tex1.b);
    float3 temp51;
    float temp52;
    temp52= temp48 * temp50;
    temp42= temp52;
    temp40= temp41 + temp42;
    temp40= 4 * temp40;
    r0.rgb= temp27;
    r1.a= temp40;
    // exp.components=3 term=3
    // line 29: SRCCOLOR= R0
    float3 temp53;
    float3 temp54;
    temp54= saturate(r0.rgb);
    float3 temp55;
    temp53= temp54;
    // exp.components=1 term=1
    // line 30: SRCALPHA= R1a
    float temp56;
    float temp57;
    temp57= saturate(r1.a);
    float3 temp58;
    temp56= temp57;
    r0.rgb= temp53;
    r0.a= temp56;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
