; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_transparent_default_transparent_tint_0.txt
;
#const C1.rgb= $alpha_blend_tint
#const C1.a= $alpha_blend_opacity
#const C2.rgb= $alpha_blend_color
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex0;
    float4 tex1;
    float4 tex2;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=3 term=3
    // line 14: R0= T3*T3
    float3 temp0;
    float3 temp1;
    temp1= saturate(tex3.rgb);
    float3 temp2;
    float3 temp3;
    temp3= saturate(tex3.rgb);
    float3 temp4;
    float3 temp5;
    temp5= temp1 * temp3;
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 16: R0= R0*R0
    float3 temp6;
    float3 temp7;
    temp7= saturate(r0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= saturate(r0.rgb);
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    r0.rgb= temp6;
    // exp.components=3 term=3 term=3
    // line 20: R0= INVERT(C0)*R0 + C0*T3
    float3 temp12;
    float3 temp13;
    float3 temp14;
    float3 temp15;
    temp15= 1-c1.rgb;
    float3 temp16;
    float3 temp17;
    temp17= saturate(r0.rgb);
    float3 temp18;
    float3 temp19;
    temp19= temp15 * temp17;
    temp13= temp19;
    float3 temp20;
    temp20= c1.rgb;
    float3 temp21;
    float3 temp22;
    temp22= saturate(tex3.rgb);
    float3 temp23;
    float3 temp24;
    temp24= temp20 * temp22;
    temp14= temp24;
    temp12= temp13 + temp14;
    // exp.components=1 term=1
    // line 21: T3a= T3a*C0a
    float temp25;
    float temp26;
    temp26= saturate(tex3.a);
    float3 temp27;
    float temp28;
    temp28= c1.a;
    float3 temp29;
    float temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    r0.rgb= temp12;
    tex3.a= temp25;
    // exp.components=3 term=3
    // line 24: R0= R0*C0
    float3 temp31;
    float3 temp32;
    temp32= saturate(r0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= c2.rgb;
    float3 temp35;
    float3 temp36;
    temp36= temp32 * temp34;
    temp31= temp36;
    // exp.components=3 term=3
    // line 25: R1= D0*T3a
    float3 temp37;
    float3 temp38;
    temp38= saturate(color0.rgb);
    float3 temp39;
    float temp40;
    temp40= saturate(tex3.a);
    float3 temp41;
    float3 temp42;
    temp42= temp38 * temp40;
    temp37= temp42;
    // exp.components=1 term=1
    // line 26: R0a= T3a*D0a
    float temp43;
    float temp44;
    temp44= saturate(tex3.a);
    float3 temp45;
    float temp46;
    temp46= saturate(color0.a);
    float3 temp47;
    float temp48;
    temp48= temp44 * temp46;
    temp43= temp48;
    r0.rgb= temp31;
    r1.rgb= temp37;
    r0.a= temp43;
    // exp.components=3 term=3
    // line 28: E= R0
    float3 temp49;
    temp49= saturate(r0.rgb);
    float3 temp50;
    e= temp49;
    // exp.components=3 term=3
    // line 29: F= R1
    float3 temp51;
    temp51= saturate(r1.rgb);
    float3 temp52;
    f= temp51;
    // exp.components=3 term=3
    // line 30: SRCCOLOR= EF*D0a
    float3 temp53;
    float3 temp54;
    float3 temp55;
    temp55= e.rgb*f.rgb;
    temp54= temp55;
    float temp56;
    temp56= saturate(color0.a);
    float3 temp57;
    float3 temp58;
    temp58= temp54 * temp56;
    temp53= temp58;
    // exp.components=1 term=1
    // line 31: SRCALPHA= R0a
    float temp59;
    float temp60;
    temp60= saturate(r0.a);
    float3 temp61;
    temp59= temp60;
    r0.rgb= temp53;
    r0.a= temp59;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
