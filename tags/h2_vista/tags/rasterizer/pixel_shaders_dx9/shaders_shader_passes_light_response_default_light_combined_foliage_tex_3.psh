; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_light_response_default_light_combined_foliage_tex_3.txt
;
#const C2.rgb= $light_diffuse_color
#const C3.rgb= $foliage_see_through_color
#case $light_definition_specular_enabled=0 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 28: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c2.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp12;
    float3 temp13;
    float3 temp14;
    float3 temp15;
    temp15= saturate(r0.rgb);
    float3 temp16;
    temp13= temp15;
    float3 temp17;
    temp17= r0.rgb;
    float3 temp18;
    float3 temp19;
    temp19= c3.rgb;
    float3 temp20;
    float3 temp21;
    temp21= temp17 * temp19;
    temp14= temp21;
    temp12= temp13 - temp14;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp22;
    float temp23;
    temp23= saturate(color0.a);
    float3 temp24;
    temp22= temp23;
    r0.rgb= temp12;
    r0.a= temp22;
    // exp.components=3 term=1 term=3
    // line 47: R0= 0 mux R0*T0
    float3 temp25;
    float temp26;
    float3 temp27;
    float temp28;
    temp28= 0;
    float3 temp29;
    temp26= temp28;
    float3 temp30;
    temp30= saturate(r0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp27= temp34;
    temp25= lerp(temp26,temp27,round(r0.a));
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp35;
    temp35= saturate(r0.rgb);
    float3 temp36;
    e= temp35;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp37;
    temp37= saturate(tex3.rgb);
    float3 temp38;
    f= temp37;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp39;
    float3 temp40;
    float3 temp41;
    temp41= e.rgb*f.rgb;
    temp40= temp41;
    float temp42;
    temp42= 1-saturate(tex0.b);
    float3 temp43;
    float3 temp44;
    temp44= temp40 * temp42;
    temp39= temp44;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp45;
    float temp46;
    temp46= 0;
    float3 temp47;
    temp45= temp46;
    r0.rgb= temp39;
    r0.a= temp45;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_overbrightness=0
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 32: T3= T3.C0
    float temp0;
    float3 temp1;
    temp1= saturate(tex3.rgb);
    float3 temp2;
    float3 temp3;
    temp3= float3(0.000000,0.000000,1.000000);
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    // exp.components=1 term=1
    // line 33: R0= EXPAND(T2).EXPAND(T1)
    float temp6;
    float3 temp7;
    temp7= 2 * saturate(tex2.rgb) - 1;
    float3 temp8;
    float3 temp9;
    temp9= 2 * saturate(tex1.rgb) - 1;
    float3 temp10;
    float temp11;
    temp11= dot(temp7, temp9);
    temp6= temp11;
    tex3.rgb= temp0;
    r0.rgb= temp6;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= c2.rgb;
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= r0.rgb;
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp28;
    float temp29;
    temp29= saturate(color0.a);
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp18;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 47: R0= 0 mux R0*T0
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(tex0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 28: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c2.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp12;
    float3 temp13;
    float3 temp14;
    float3 temp15;
    temp15= saturate(r0.rgb);
    float3 temp16;
    temp13= temp15;
    float3 temp17;
    temp17= r0.rgb;
    float3 temp18;
    float3 temp19;
    temp19= c3.rgb;
    float3 temp20;
    float3 temp21;
    temp21= temp17 * temp19;
    temp14= temp21;
    temp12= temp13 - temp14;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp22;
    float temp23;
    temp23= saturate(color0.a);
    float3 temp24;
    temp22= temp23;
    r0.rgb= temp12;
    r0.a= temp22;
    // exp.components=3 term=1 term=3
    // line 50: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp25;
    float temp26;
    float3 temp27;
    float temp28;
    temp28= 0;
    float3 temp29;
    temp26= temp28;
    float3 temp30;
    temp30= saturate(r0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp27= temp34;
    temp25= lerp(temp26,temp27,round(r0.a));
    temp25= 2 * temp25;
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp35;
    temp35= saturate(r0.rgb);
    float3 temp36;
    e= temp35;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp37;
    temp37= saturate(tex3.rgb);
    float3 temp38;
    f= temp37;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp39;
    float3 temp40;
    float3 temp41;
    temp41= e.rgb*f.rgb;
    temp40= temp41;
    float temp42;
    temp42= 1-saturate(tex0.b);
    float3 temp43;
    float3 temp44;
    temp44= temp40 * temp42;
    temp39= temp44;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp45;
    float temp46;
    temp46= 0;
    float3 temp47;
    temp45= temp46;
    r0.rgb= temp39;
    r0.a= temp45;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_overbrightness=1
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 32: T3= T3.C0
    float temp0;
    float3 temp1;
    temp1= saturate(tex3.rgb);
    float3 temp2;
    float3 temp3;
    temp3= float3(0.000000,0.000000,1.000000);
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    // exp.components=1 term=1
    // line 33: R0= EXPAND(T2).EXPAND(T1)
    float temp6;
    float3 temp7;
    temp7= 2 * saturate(tex2.rgb) - 1;
    float3 temp8;
    float3 temp9;
    temp9= 2 * saturate(tex1.rgb) - 1;
    float3 temp10;
    float temp11;
    temp11= dot(temp7, temp9);
    temp6= temp11;
    tex3.rgb= temp0;
    r0.rgb= temp6;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= c2.rgb;
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= r0.rgb;
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp28;
    float temp29;
    temp29= saturate(color0.a);
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp18;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 50: R0= OUT_SCALE_BY_2(0 mux R0*T0)
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    temp31= 2 * temp31;
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(tex0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=0 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 28: R0= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    r0.rgb= temp0;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c2.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    tex0.rgb= temp6;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp12;
    float3 temp13;
    float3 temp14;
    float3 temp15;
    temp15= saturate(r0.rgb);
    float3 temp16;
    temp13= temp15;
    float3 temp17;
    temp17= r0.rgb;
    float3 temp18;
    float3 temp19;
    temp19= c3.rgb;
    float3 temp20;
    float3 temp21;
    temp21= temp17 * temp19;
    temp14= temp21;
    temp12= temp13 - temp14;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp22;
    float temp23;
    temp23= saturate(color0.a);
    float3 temp24;
    temp22= temp23;
    r0.rgb= temp12;
    r0.a= temp22;
    // exp.components=3 term=1 term=3
    // line 53: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp25;
    float temp26;
    float3 temp27;
    float temp28;
    temp28= 0;
    float3 temp29;
    temp26= temp28;
    float3 temp30;
    temp30= saturate(r0.rgb);
    float3 temp31;
    float3 temp32;
    temp32= saturate(tex0.rgb);
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp27= temp34;
    temp25= lerp(temp26,temp27,round(r0.a));
    temp25= 4 * temp25;
    r0.rgb= temp25;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp35;
    temp35= saturate(r0.rgb);
    float3 temp36;
    e= temp35;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp37;
    temp37= saturate(tex3.rgb);
    float3 temp38;
    f= temp37;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp39;
    float3 temp40;
    float3 temp41;
    temp41= e.rgb*f.rgb;
    temp40= temp41;
    float temp42;
    temp42= 1-saturate(tex0.b);
    float3 temp43;
    float3 temp44;
    temp44= temp40 * temp42;
    temp39= temp44;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp45;
    float temp46;
    temp46= 0;
    float3 temp47;
    temp45= temp46;
    r0.rgb= temp39;
    r0.a= temp45;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
#case $light_definition_specular_enabled=1 $light_diffuse_overbrightness=2
sampler2D s0 : register(S0);
samplerCUBE s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 c3 : register(C3);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 2 dot 0 input-stage 0
    float4 tex1= texCUBE(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=1 term=1
    // line 32: T3= T3.C0
    float temp0;
    float3 temp1;
    temp1= saturate(tex3.rgb);
    float3 temp2;
    float3 temp3;
    temp3= float3(0.000000,0.000000,1.000000);
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    // exp.components=1 term=1
    // line 33: R0= EXPAND(T2).EXPAND(T1)
    float temp6;
    float3 temp7;
    temp7= 2 * saturate(tex2.rgb) - 1;
    float3 temp8;
    float3 temp9;
    temp9= 2 * saturate(tex1.rgb) - 1;
    float3 temp10;
    float temp11;
    temp11= dot(temp7, temp9);
    temp6= temp11;
    tex3.rgb= temp0;
    r0.rgb= temp6;
    // exp.components=3 term=3
    // line 38: T0= T0*C0
    float3 temp12;
    float3 temp13;
    temp13= saturate(tex0.rgb);
    float3 temp14;
    float3 temp15;
    temp15= c2.rgb;
    float3 temp16;
    float3 temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp12;
    // exp.components=3 term=3 term=3
    // line 41: R0= R0 - SIGNED(R0)*C0
    float3 temp18;
    float3 temp19;
    float3 temp20;
    float3 temp21;
    temp21= saturate(r0.rgb);
    float3 temp22;
    temp19= temp21;
    float3 temp23;
    temp23= r0.rgb;
    float3 temp24;
    float3 temp25;
    temp25= c3.rgb;
    float3 temp26;
    float3 temp27;
    temp27= temp23 * temp25;
    temp20= temp27;
    temp18= temp19 - temp20;
    // exp.components=1 term=1
    // line 42: R0a= D0a
    float temp28;
    float temp29;
    temp29= saturate(color0.a);
    float3 temp30;
    temp28= temp29;
    r0.rgb= temp18;
    r0.a= temp28;
    // exp.components=3 term=1 term=3
    // line 53: R0= OUT_SCALE_BY_4(0 mux R0*T0)
    float3 temp31;
    float temp32;
    float3 temp33;
    float temp34;
    temp34= 0;
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(r0.rgb);
    float3 temp37;
    float3 temp38;
    temp38= saturate(tex0.rgb);
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= lerp(temp32,temp33,round(r0.a));
    temp31= 4 * temp31;
    r0.rgb= temp31;
    // exp.components=3 term=3
    // line 57: E= R0
    float3 temp41;
    temp41= saturate(r0.rgb);
    float3 temp42;
    e= temp41;
    // exp.components=3 term=3
    // line 58: F= T3
    float3 temp43;
    temp43= saturate(tex3.rgb);
    float3 temp44;
    f= temp43;
    // exp.components=3 term=3
    // line 60: SRCCOLOR=EF*INVERT(T0b)
    float3 temp45;
    float3 temp46;
    float3 temp47;
    temp47= e.rgb*f.rgb;
    temp46= temp47;
    float temp48;
    temp48= 1-saturate(tex0.b);
    float3 temp49;
    float3 temp50;
    temp50= temp46 * temp48;
    temp45= temp50;
    // exp.components=1 term=1
    // line 61: SRCALPHA= 0
    float temp51;
    float temp52;
    temp52= 0;
    float3 temp53;
    temp51= temp52;
    r0.rgb= temp45;
    r0.a= temp51;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
