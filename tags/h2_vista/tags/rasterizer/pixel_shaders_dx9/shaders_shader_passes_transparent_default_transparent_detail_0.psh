; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_transparent_default_transparent_detail_0.txt
;
#const C1.rgb= $environment_color
#const C2.rgb= $alpha_blend_color
#const C2.a= $alpha_blend_opacity
samplerCUBE s0 : register(S0);
sampler2D s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 2 dot 0 input-stage 0
    float4 tex0= texCUBE(s0, tc0);
// texture stage 1 mode 0 dot 0 input-stage 0
    float4 tex1= tex2Dproj(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=3 term=3
    // line 17: T0= T0*C0
    float3 temp0;
    float3 temp1;
    temp1= saturate(tex0.rgb);
    float3 temp2;
    float3 temp3;
    temp3= c1.rgb;
    float3 temp4;
    float3 temp5;
    temp5= temp1 * temp3;
    temp0= temp5;
    // exp.components=3 term=3
    // line 18: T3= T3*C1
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex3.rgb);
    float3 temp8;
    float3 temp9;
    temp9= c2.rgb;
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    // exp.components=1 term=1
    // line 19: T3a= T3a*C1a
    float temp12;
    float temp13;
    temp13= saturate(tex3.a);
    float3 temp14;
    float temp15;
    temp15= c2.a;
    float3 temp16;
    float temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    tex0.rgb= temp0;
    tex3.rgb= temp6;
    tex3.a= temp12;
    // exp.components=3 term=3
    // line 22: R0= T0*T1
    float3 temp18;
    float3 temp19;
    temp19= saturate(tex0.rgb);
    float3 temp20;
    float3 temp21;
    temp21= saturate(tex1.rgb);
    float3 temp22;
    float3 temp23;
    temp23= temp19 * temp21;
    temp18= temp23;
    // exp.components=3 term=3
    // line 23: R1= OUT_SCALE_BY_2(T3*T2)
    float3 temp24;
    float3 temp25;
    temp25= saturate(tex3.rgb);
    float3 temp26;
    float3 temp27;
    temp27= saturate(tex2.rgb);
    float3 temp28;
    float3 temp29;
    temp29= temp25 * temp27;
    temp24= temp29;
    temp24= 2 * temp24;
    r0.rgb= temp18;
    r1.rgb= temp24;
    // exp.components=3 term=3
    // line 26: R0= R0*D1a
    float3 temp30;
    float3 temp31;
    temp31= saturate(r0.rgb);
    float3 temp32;
    float temp33;
    temp33= saturate(color1.a);
    float3 temp34;
    float3 temp35;
    temp35= temp31 * temp33;
    temp30= temp35;
    // exp.components=3 term=3
    // line 27: R1= R1*D1a
    float3 temp36;
    float3 temp37;
    temp37= saturate(r1.rgb);
    float3 temp38;
    float temp39;
    temp39= saturate(color1.a);
    float3 temp40;
    float3 temp41;
    temp41= temp37 * temp39;
    temp36= temp41;
    // exp.components=1 term=1
    // line 28: T3a= T3a*D1a
    float temp42;
    float temp43;
    temp43= saturate(tex3.a);
    float3 temp44;
    float temp45;
    temp45= saturate(color1.a);
    float3 temp46;
    float temp47;
    temp47= temp43 * temp45;
    temp42= temp47;
    r0.rgb= temp30;
    r1.rgb= temp36;
    tex3.a= temp42;
    // exp.components=3 term=3 term=3
    // line 30: R0= R0*T3a + R1*T3a
    float3 temp48;
    float3 temp49;
    float3 temp50;
    float3 temp51;
    temp51= saturate(r0.rgb);
    float3 temp52;
    float temp53;
    temp53= saturate(tex3.a);
    float3 temp54;
    float3 temp55;
    temp55= temp51 * temp53;
    temp49= temp55;
    float3 temp56;
    temp56= saturate(r1.rgb);
    float3 temp57;
    float temp58;
    temp58= saturate(tex3.a);
    float3 temp59;
    float3 temp60;
    temp60= temp56 * temp58;
    temp50= temp60;
    temp48= temp49 + temp50;
    // exp.components=1 term=1
    // line 31: R0a= T3a*D0a
    float temp61;
    float temp62;
    temp62= saturate(tex3.a);
    float3 temp63;
    float temp64;
    temp64= saturate(color0.a);
    float3 temp65;
    float temp66;
    temp66= temp62 * temp64;
    temp61= temp66;
    r0.rgb= temp48;
    r0.a= temp61;
    // exp.components=3 term=3
    // line 33: E= R0
    float3 temp67;
    temp67= saturate(r0.rgb);
    float3 temp68;
    e= temp67;
    // exp.components=3 term=3
    // line 34: F= D0
    float3 temp69;
    temp69= saturate(color0.rgb);
    float3 temp70;
    f= temp69;
    // exp.components=3 term=3
    // line 35: SRCCOLOR= EF*D0a
    float3 temp71;
    float3 temp72;
    float3 temp73;
    temp73= e.rgb*f.rgb;
    temp72= temp73;
    float temp74;
    temp74= saturate(color0.a);
    float3 temp75;
    float3 temp76;
    temp76= temp72 * temp74;
    temp71= temp76;
    // exp.components=1 term=1
    // line 36: SRCALPHA= R0a
    float temp77;
    float temp78;
    temp78= saturate(r0.a);
    float3 temp79;
    temp77= temp78;
    r0.rgb= temp71;
    r0.a= temp77;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
