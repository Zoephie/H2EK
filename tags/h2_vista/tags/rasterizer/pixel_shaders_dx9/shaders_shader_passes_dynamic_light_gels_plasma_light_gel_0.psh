; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_dynamic_light_gels_plasma_light_gel_0.txt
;
sampler2D s0 : register(S0);
sampler2D s1 : register(S1);
sampler2D s2 : register(S2);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 0 dot 0 input-stage 0
    float4 tex1= tex2Dproj(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
    // exp.components=3 term=3 term=3
    // line 13: R0= T0 - T1
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float3 temp3;
    temp3= saturate(tex0.rgb);
    float3 temp4;
    temp1= temp3;
    float3 temp5;
    temp5= saturate(tex1.rgb);
    float3 temp6;
    temp2= temp5;
    temp0= temp1 - temp2;
    // exp.components=1 term=1 term=1
    // line 14: R0a= T1b - T0b
    float temp7;
    float temp8;
    float temp9;
    float temp10;
    temp10= saturate(tex1.b);
    float3 temp11;
    temp8= temp10;
    float temp12;
    temp12= saturate(tex0.b);
    float3 temp13;
    temp9= temp12;
    temp7= temp8 - temp9;
    r0.rgb= temp0;
    r0.a= temp7;
    // exp.components=3 term=3 term=1
    // line 17: R0= SIGNED(R0) + C0a
    float3 temp14;
    float3 temp15;
    float temp16;
    float3 temp17;
    temp17= r0.rgb;
    float3 temp18;
    temp15= temp17;
    float temp19;
    temp19= 0.501961;
    float3 temp20;
    temp16= temp19;
    temp14= temp15 + temp16;
    // exp.components=1 term=1 term=1
    // line 18: R0a= SIGNED(R0a) + C0a
    float temp21;
    float temp22;
    float temp23;
    float temp24;
    temp24= r0.a;
    float3 temp25;
    temp22= temp24;
    float temp26;
    temp26= 0.501961;
    float3 temp27;
    temp23= temp26;
    temp21= temp22 + temp23;
    r0.rgb= temp14;
    r0.a= temp21;
    // exp.components=1 term=1 term=1
    // line 21: R0a= OUT_SCALE_BY_4(R0a*R0a mux R0b*R0b)
    float temp28;
    float temp29;
    float temp30;
    float temp31;
    temp31= saturate(r0.a);
    float3 temp32;
    float temp33;
    temp33= saturate(r0.a);
    float3 temp34;
    float temp35;
    temp35= temp31 * temp33;
    temp29= temp35;
    float temp36;
    temp36= saturate(r0.b);
    float3 temp37;
    float temp38;
    temp38= saturate(r0.b);
    float3 temp39;
    float temp40;
    temp40= temp36 * temp38;
    temp30= temp40;
    temp28= lerp(temp29,temp30,round(r0.a));
    temp28= 4 * temp28;
    // exp.components=1 term=1 term=1
    // line 22: R0= 0 mux 1
    float temp41;
    float temp42;
    float temp43;
    float temp44;
    temp44= 0;
    float3 temp45;
    temp42= temp44;
    float temp46;
    temp46= 1;
    float3 temp47;
    temp43= temp46;
    temp41= lerp(temp42,temp43,round(r0.a));
    r0.a= temp28;
    r0.rgb= temp41;
    // exp.components=1 term=1 term=1
    // line 25: R1a= R0a + INVERT(R0a)*C0a
    float temp48;
    float temp49;
    float temp50;
    float temp51;
    temp51= saturate(r0.a);
    float3 temp52;
    temp49= temp51;
    float temp53;
    temp53= 1-saturate(r0.a);
    float3 temp54;
    float temp55;
    temp55= 0.313725;
    float3 temp56;
    float temp57;
    temp57= temp53 * temp55;
    temp50= temp57;
    temp48= temp49 + temp50;
    r1.a= temp48;
    // exp.components=3 term=3 term=3
    // line 27: R0= R0*R1a + INVERT(R0)*R0a
    float3 temp58;
    float3 temp59;
    float3 temp60;
    float3 temp61;
    temp61= saturate(r0.rgb);
    float3 temp62;
    float temp63;
    temp63= saturate(r1.a);
    float3 temp64;
    float3 temp65;
    temp65= temp61 * temp63;
    temp59= temp65;
    float3 temp66;
    temp66= 1-saturate(r0.rgb);
    float3 temp67;
    float temp68;
    temp68= saturate(r0.a);
    float3 temp69;
    float3 temp70;
    temp70= temp66 * temp68;
    temp60= temp70;
    temp58= temp59 + temp60;
    r0.rgb= temp58;
    // exp.components=3 term=3
    // line 29: SRCCOLOR= R0*T2
    float3 temp71;
    float3 temp72;
    temp72= saturate(r0.rgb);
    float3 temp73;
    float3 temp74;
    temp74= saturate(tex2.rgb);
    float3 temp75;
    float3 temp76;
    temp76= temp72 * temp74;
    temp71= temp76;
    // exp.components=1 term=1
    // line 30: SRCALPHA= 0
    float temp77;
    float temp78;
    temp78= 0;
    float3 temp79;
    temp77= temp78;
    r0.rgb= temp71;
    r0.a= temp77;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
