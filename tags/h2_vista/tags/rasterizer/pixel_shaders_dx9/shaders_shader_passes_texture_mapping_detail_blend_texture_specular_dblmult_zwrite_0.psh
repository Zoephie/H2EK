; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_texture_mapping_detail_blend_texture_specular_dblmult_zwrite_0.txt
;
#const C1.rgb= $diffuse_color
#const C2.rgb= $diffuse_color_offset
sampler2D s0 : register(S0);
sampler2D s1 : register(S1);
sampler2D s2 : register(S2);
sampler2D s3 : register(S3);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
    float4 tex0= tex2Dproj(s0, tc0);
// texture stage 1 mode 0 dot 0 input-stage 0
    float4 tex1= tex2Dproj(s1, tc1);
// texture stage 2 mode 0 dot 0 input-stage 0
    float4 tex2= tex2Dproj(s2, tc2);
// texture stage 3 mode 0 dot 0 input-stage 0
    float4 tex3= tex2Dproj(s3, tc3);
    // exp.components=3 term=3 term=3
    // line 13: R0= INVERT(T0a)*T1 + T0a*T2
    float3 temp0;
    float3 temp1;
    float3 temp2;
    float temp3;
    temp3= 1-saturate(tex0.a);
    float3 temp4;
    float3 temp5;
    temp5= saturate(tex1.rgb);
    float3 temp6;
    float3 temp7;
    temp7= temp3 * temp5;
    temp1= temp7;
    float temp8;
    temp8= saturate(tex0.a);
    float3 temp9;
    float3 temp10;
    temp10= saturate(tex2.rgb);
    float3 temp11;
    float3 temp12;
    temp12= temp8 * temp10;
    temp2= temp12;
    temp0= temp1 + temp2;
    // exp.components=1 term=1
    // line 14: R0a= OUT_SCALE_BY_2(T3a*T1a)
    float temp13;
    float temp14;
    temp14= saturate(tex3.a);
    float3 temp15;
    float temp16;
    temp16= saturate(tex1.a);
    float3 temp17;
    float temp18;
    temp18= temp14 * temp16;
    temp13= temp18;
    temp13= 2 * temp13;
    r0.rgb= temp0;
    r0.a= temp13;
    // exp.components=3 term=3
    // line 16: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp19;
    float3 temp20;
    temp20= saturate(r0.rgb);
    float3 temp21;
    float3 temp22;
    temp22= saturate(tex0.rgb);
    float3 temp23;
    float3 temp24;
    temp24= temp20 * temp22;
    temp19= temp24;
    temp19= 2 * temp19;
    // exp.components=1 term=1
    // line 17: R0a= OUT_SCALE_BY_2(R0a*T2a)
    float temp25;
    float temp26;
    temp26= saturate(r0.a);
    float3 temp27;
    float temp28;
    temp28= saturate(tex2.a);
    float3 temp29;
    float temp30;
    temp30= temp26 * temp28;
    temp25= temp30;
    temp25= 2 * temp25;
    r0.rgb= temp19;
    r0.a= temp25;
    // exp.components=3 term=3 term=3
    // line 21: SRCCOLOR= R0*C0 + C1
    float3 temp31;
    float3 temp32;
    float3 temp33;
    float3 temp34;
    temp34= saturate(r0.rgb);
    float3 temp35;
    float3 temp36;
    temp36= c1.rgb;
    float3 temp37;
    float3 temp38;
    temp38= temp34 * temp36;
    temp32= temp38;
    float3 temp39;
    temp39= c2.rgb;
    float3 temp40;
    temp33= temp39;
    temp31= temp32 + temp33;
    // exp.components=1 term=1
    // line 22: SRCALPHA= R0a
    float temp41;
    float temp42;
    temp42= saturate(r0.a);
    float3 temp43;
    temp41= temp42;
    r0.rgb= temp31;
    r0.a= temp41;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
