; compiled from tags\rasterizer\pixel_shaders_dx9\test_anim_tex_shader_pass_lightmap_old_lightmap_tangentspace_0.txt
;
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
    float4 tc7:TEXCOORD7,
    float4 color0 : COLOR0,
    float4 color1 : COLOR1
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex0;
    float4 tex1;
    float4 tex2;
    float4 tex3;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
    // exp.components=1 term=1
    // line 9: R1= EXPAND(T2).EXPAND(T1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(tex1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    // exp.components=1 term=1
    // line 11: D0a= INVERT(D0a)*INVERT(D0a)
    float temp6;
    float temp7;
    temp7= 1-saturate(color0.a);
    float3 temp8;
    float temp9;
    temp9= 1-saturate(color0.a);
    float3 temp10;
    float temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    r1.rgb= temp0;
    color0.a= temp6;
    // exp.components=1 term=1
    // line 14: D0a= D0a*D0a
    float temp12;
    float temp13;
    temp13= saturate(color0.a);
    float3 temp14;
    float temp15;
    temp15= saturate(color0.a);
    float3 temp16;
    float temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    color0.a= temp12;
    // exp.components=3 term=3 term=1
    // line 17: R1= INVERT(D0a)*R1+D0a
    float3 temp18;
    float3 temp19;
    float temp20;
    float temp21;
    temp21= 1-saturate(color0.a);
    float3 temp22;
    float3 temp23;
    temp23= saturate(r1.rgb);
    float3 temp24;
    float3 temp25;
    temp25= temp21 * temp23;
    temp19= temp25;
    float temp26;
    temp26= saturate(color0.a);
    float3 temp27;
    temp20= temp26;
    temp18= temp19 + temp20;
    r1.rgb= temp18;
    // exp.components=3 term=3
    // line 20: T2= T0*R1
    float3 temp28;
    float3 temp29;
    temp29= saturate(tex0.rgb);
    float3 temp30;
    float3 temp31;
    temp31= saturate(r1.rgb);
    float3 temp32;
    float3 temp33;
    temp33= temp29 * temp31;
    temp28= temp33;
    tex2.rgb= temp28;
    // exp.components=1 term=1
    // line 24: T2= OUT_SCALE_BY_2(C0.T2)
    float temp34;
    float3 temp35;
    temp35= float3(0.752941,0.752941,0.752941);
    float3 temp36;
    float3 temp37;
    temp37= saturate(tex2.rgb);
    float3 temp38;
    float temp39;
    temp39= dot(temp35, temp37);
    temp34= temp39;
    temp34= 2 * temp34;
    tex2.rgb= temp34;
    // exp.components=3 term=3
    // line 27: R0= T0*R1
    float3 temp40;
    float3 temp41;
    temp41= saturate(tex0.rgb);
    float3 temp42;
    float3 temp43;
    temp43= saturate(r1.rgb);
    float3 temp44;
    float3 temp45;
    temp45= temp41 * temp43;
    temp40= temp45;
    // exp.components=1 term=1
    // line 29: R0a= T3a*T2b
    float temp46;
    float temp47;
    temp47= saturate(tex3.a);
    float3 temp48;
    float temp49;
    temp49= saturate(tex2.b);
    float3 temp50;
    float temp51;
    temp51= temp47 * temp49;
    temp46= temp51;
    r0.rgb= temp40;
    r0.a= temp46;
    // exp.components=3 term=3
    // line 32: R0= OUT_SCALE_BY_2(T3*R0)
    float3 temp52;
    float3 temp53;
    temp53= saturate(tex3.rgb);
    float3 temp54;
    float3 temp55;
    temp55= saturate(r0.rgb);
    float3 temp56;
    float3 temp57;
    temp57= temp53 * temp55;
    temp52= temp57;
    temp52= 2 * temp52;
    r0.rgb= temp52;
    // exp.components=3 term=3
    // line 34: SRCCOLOR= R0
    float3 temp58;
    float3 temp59;
    temp59= saturate(r0.rgb);
    float3 temp60;
    temp58= temp59;
    // exp.components=1 term=1
    // line 35: SRCALPHA= R0a
    float temp61;
    float temp62;
    temp62= saturate(r0.a);
    float3 temp63;
    temp61= temp62;
    r0.rgb= temp58;
    r0.a= temp61;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
